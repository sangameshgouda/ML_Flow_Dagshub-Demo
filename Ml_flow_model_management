{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "0a5f5498-bf62-4b56-b5e4-13856242ecea",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "\n",
    "#machine learning algorithms\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from xgboost import XGBClassifier\n",
    "#metrics\n",
    "from sklearn.metrics import classification_report"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "73af4ca2-f09e-4fa1-8bcc-e4f52ce8b4f5",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.datasets import make_classification"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "bf82e989-7ead-4657-9c32-39b662473237",
   "metadata": {},
   "outputs": [],
   "source": [
    "#dataset\n",
    "x,y = make_classification(n_samples=1000,n_features=10,n_informative=2,n_redundant=8,weights=[0.9,0.1],flip_y=0,random_state=20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "29bc27bd-199a-48d2-b55b-ca65b91ba391",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([0, 1]), array([900, 100]))"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.unique(y,return_counts=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "32e318a5-dc63-45f5-88c0-c38d2df91db7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((700, 10), (700,))"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#split the dataset into train and test\n",
    "\n",
    "\n",
    "x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,stratify=y,random_state=20)\n",
    "x_train.shape,y_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "590d767f-6c0d-4c65-9f1c-bff6a92b8c82",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.99      1.00      0.99       270\n",
      "           1       0.97      0.93      0.95        30\n",
      "\n",
      "    accuracy                           0.99       300\n",
      "   macro avg       0.98      0.96      0.97       300\n",
      "weighted avg       0.99      0.99      0.99       300\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#experiment 1\n",
    "params = {\n",
    "    \"solver\": \"lbfgs\",\n",
    "    \"max_iter\": 1000,\n",
    "    \"multi_class\": \"auto\",\n",
    "    \"random_state\": 8888,\n",
    "}\n",
    "\n",
    "Log_reg=LogisticRegression(**params)\n",
    "Log_reg.fit(x_train,y_train)\n",
    "\n",
    "y_pred_log_reg=Log_reg.predict(x_test)\n",
    "report=classification_report(y_test,y_pred_log_reg)\n",
    "\n",
    "print(report)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "725f54a6-1dd3-490d-a839-63844f42a0ae",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'0': {'precision': 0.992619926199262,\n",
       "  'recall': 0.9962962962962963,\n",
       "  'f1-score': 0.9944547134935305,\n",
       "  'support': 270.0},\n",
       " '1': {'precision': 0.9655172413793104,\n",
       "  'recall': 0.9333333333333333,\n",
       "  'f1-score': 0.9491525423728814,\n",
       "  'support': 30.0},\n",
       " 'accuracy': 0.99,\n",
       " 'macro avg': {'precision': 0.9790685837892862,\n",
       "  'recall': 0.9648148148148148,\n",
       "  'f1-score': 0.971803627933206,\n",
       "  'support': 300.0},\n",
       " 'weighted avg': {'precision': 0.9899096577172668,\n",
       "  'recall': 0.99,\n",
       "  'f1-score': 0.9899244963814656,\n",
       "  'support': 300.0}}"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "report_dict = classification_report(y_test, y_pred_log_reg, output_dict=True)\n",
    "report_dict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "99a3e77c-3cc2-4a7b-8479-d57e9fb1d954",
   "metadata": {},
   "outputs": [],
   "source": [
    "import mlflow"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "2c4f7217-ea9f-49e1-9aaa-a97bf450a206",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[31m2025/05/10 14:51:20 WARNING mlflow.models.model: Model logged without a signature and input example. Please set `input_example` parameter when logging the model to auto infer the model signature.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "üèÉ View run hilarious-bat-640 at: http://127.0.0.1:5000/#/experiments/817486312250794547/runs/44522bf704754e7bb7da88d34e2aeea3\n",
      "üß™ View experiment at: http://127.0.0.1:5000/#/experiments/817486312250794547\n"
     ]
    }
   ],
   "source": [
    "mlflow.set_experiment(\"First experiment\")\n",
    "mlflow.set_tracking_uri(\"http://127.0.0.1:5000/\")\n",
    "\n",
    "with mlflow.start_run():\n",
    "    mlflow.log_params(params)\n",
    "    mlflow.log_metrics({\"accuracy\":report_dict[\"accuracy\"],\n",
    "                      'recall_class_0': report_dict['0']['recall'],\n",
    "        'recall_class_1': report_dict['1']['recall'],\n",
    "        'f1_score_macro': report_dict['macro avg']['f1-score']\n",
    "        })\n",
    "    mlflow.sklearn.log_model(Log_reg,\"Logistic Regression\") "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
